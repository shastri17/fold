// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: grpc/hashtag/hashtag.proto

package hashtag

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hashtag_CreateHashTag_FullMethodName = "/fold.protobuf.grpc.hashtag.Hashtag/CreateHashTag"
)

// HashtagClient is the client API for Hashtag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HashtagClient interface {
	CreateHashTag(ctx context.Context, in *CreateHashTagRequest, opts ...grpc.CallOption) (*CreateHashTagResponse, error)
}

type hashtagClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtagClient(cc grpc.ClientConnInterface) HashtagClient {
	return &hashtagClient{cc}
}

func (c *hashtagClient) CreateHashTag(ctx context.Context, in *CreateHashTagRequest, opts ...grpc.CallOption) (*CreateHashTagResponse, error) {
	out := new(CreateHashTagResponse)
	err := c.cc.Invoke(ctx, Hashtag_CreateHashTag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtagServer is the server API for Hashtag service.
// All implementations should embed UnimplementedHashtagServer
// for forward compatibility
type HashtagServer interface {
	CreateHashTag(context.Context, *CreateHashTagRequest) (*CreateHashTagResponse, error)
}

// UnimplementedHashtagServer should be embedded to have forward compatible implementations.
type UnimplementedHashtagServer struct {
}

func (UnimplementedHashtagServer) CreateHashTag(context.Context, *CreateHashTagRequest) (*CreateHashTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHashTag not implemented")
}

// UnsafeHashtagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtagServer will
// result in compilation errors.
type UnsafeHashtagServer interface {
	mustEmbedUnimplementedHashtagServer()
}

func RegisterHashtagServer(s grpc.ServiceRegistrar, srv HashtagServer) {
	s.RegisterService(&Hashtag_ServiceDesc, srv)
}

func _Hashtag_CreateHashTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHashTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServer).CreateHashTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hashtag_CreateHashTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServer).CreateHashTag(ctx, req.(*CreateHashTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hashtag_ServiceDesc is the grpc.ServiceDesc for Hashtag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hashtag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fold.protobuf.grpc.hashtag.Hashtag",
	HandlerType: (*HashtagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHashTag",
			Handler:    _Hashtag_CreateHashTag_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/hashtag/hashtag.proto",
}
